<ResourceDictionary 
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:sys="clr-namespace:System;assembly=mscorlib"
    xmlns:con="clr-namespace:Restless.App.Panama.Controls"
    xmlns:vm="clr-namespace:Restless.App.Panama.ViewModel">
    
    <!-- Base size definitions -->
    <sys:Double x:Key="ControlFontSize">13</sys:Double>
    <sys:Double x:Key="MinControlHeight">26</sys:Double>
    <sys:Double x:Key="MinButtonWidth">94</sys:Double>
    <!-- Some colors to stay consistent -->
    <SolidColorBrush x:Key="LabelBrush" Color="#FF0D5102"/>
    <!-- This enables the selected row to retain a highlight when the data grid loses focus. Has a problem with .Net 4.0 -->
    <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="LightSalmon"/>
    <!-- This works in .Net 4.0 -->
    <!--<SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}" Color="LightSalmon"/>-->

    <!-- Base style for all controls   -->
    <Style TargetType="Control" x:Key="BaseControl">
        <Setter Property="MinHeight" Value="{StaticResource MinControlHeight}" />
        <Setter Property="Margin" Value="3" />
        <Setter Property="FontSize" Value="{StaticResource ControlFontSize}"/>
    </Style>

    <!-- Base style for Label -->
    <Style TargetType="Label" BasedOn="{StaticResource BaseControl}">
        <Setter Property="Foreground" Value="{StaticResource LabelBrush}" />
        <Setter Property="FontSize" Value="12.5" />
        <Setter Property="Margin" Value="0" />
    </Style>

    <!-- Base style for TextBox  -->
    <Style TargetType="TextBox" BasedOn="{StaticResource BaseControl}">
        <Setter Property="Foreground" Value="Blue" />
        <Setter Property="Background" Value="#FFF8F8DF" />
        <Setter Property="Margin" Value="6,0,6,6" />
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Style.Triggers>
            <Trigger Property="IsReadOnly" Value="True">
                <Setter Property="Background" Value="#FFE3E3E3"/>
                <Setter Property="Foreground" Value="DarkGray" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Style for text box that accepts multiple lines -->
    <Style TargetType="TextBox" x:Key="TextBoxMulti" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="AcceptsReturn" Value="True" />
        <Setter Property="TextWrapping" Value="Wrap" />
        <Setter Property="Height" Value="220" />
        <Setter Property="VerticalScrollBarVisibility" Value="Auto"/>
    </Style>

    <!-- Style for text box that accepts multiple lines and fills available space -->
    <Style TargetType="TextBox" x:Key="TextBoxMultiFull" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="AcceptsReturn" Value="True" />
        <Setter Property="TextWrapping" Value="Wrap" />
        <Setter Property="VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
    </Style>

    <!-- Styles a read-only text box so it's like a label. -->
    <Style TargetType="TextBox" x:Key="TextBoxLabel" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="IsReadOnly" Value="True" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Foreground" Value="#FF802020" />
        <Setter Property="TextWrapping" Value="NoWrap" />
        <!-- need to override triggers in base TextBox style -->
        <Style.Triggers>
            <Trigger Property="IsReadOnly" Value="True">
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Foreground" Value="#FF802020" />
            </Trigger>
        </Style.Triggers>        
    </Style>

    <!-- Base style for CheckBox -->
    <Style TargetType="CheckBox" BasedOn="{StaticResource BaseControl}">
        <Setter Property="Foreground" Value="DarkBlue" />
        <Setter Property="VerticalAlignment" Value="Bottom"/>
        <Setter Property="Margin" Value="4,0,4,0" />
        <Setter Property="Cursor" Value="Hand" />
    </Style>

    <!-- Base style for RadioButton -->
    <Style TargetType="RadioButton" BasedOn="{StaticResource BaseControl}">
        <Setter Property="Foreground" Value="DarkBlue" />
        <Setter Property="FontSize" Value="12.5" />
        <Setter Property="Margin" Value="8,4" />
        <Setter Property="Cursor" Value="Hand" />
    </Style>

    <!-- Base style for ComboBox-->
    <Style TargetType="ComboBox" BasedOn="{StaticResource BaseControl}">
        <Setter Property="Foreground" Value="Blue" />
        <Setter Property="MinHeight" Value="24" />
        <Setter Property="Height" Value="24" />
        <Setter Property="VerticalAlignment" Value="Top"/>
    </Style>

    <Style TargetType="ListBox" BasedOn="{StaticResource BaseControl}">
        <Setter Property="FontSize" Value="11.0" />
        <Setter Property="MinHeight" Value="80" />
        <Style.Resources>
            <!-- This enables the selected row to retain a highlight when the data grid loses focus. Has a problem with .Net 4.0 -->
            <!--<SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="LightSalmon"/>-->
            <!-- This works in .Net 4.0 -->
            <!--<SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}" Color="{StaticResource InactiveSelectionColor}" />-->
        </Style.Resources>        
    </Style>

    <!-- Base style for GroupBox -->
    <Style TargetType="GroupBox">
        <Setter Property="BorderBrush" Value="DarkGray"/>
        <Setter Property="Margin" Value="2" />
        <Setter Property="Padding" Value="2" />
        <Setter Property="HeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Border>
                        <TextBlock Text="{Binding}" Foreground="{StaticResource LabelBrush}"/>
                    </Border>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- Base style for TextBlock. Note that TextBox derives from FrameworkElement, not Control  -->
    <Style TargetType="TextBlock">
        <Setter Property="FontSize" Value="{StaticResource ControlFontSize}"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Foreground" Value="#FF000088" />
        <Setter Property="Margin" Value="3,0,3,0" />
    </Style>
    
    <Style TargetType="TextBlock" x:Key="TextBlockError" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="FontSize" Value="11.5"/>
        <Setter Property="Foreground" Value="Red" />
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="Margin" Value="8,3" />
    </Style>

    <Style TargetType="TextBlock" x:Key="TextBlockMessage" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="FontSize" Value="11.5"/>
        <Setter Property="Foreground" Value="#FF808080" />
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="Margin" Value="3,8" />
    </Style>
    
    <Style TargetType="TextBlock" x:Key="TextBlockConfigDesc" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Foreground" Value="#FF808080" />
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="Margin" Value="8,8" />
    </Style>
    
    <Style TargetType="TextBlock" x:Key="TextBlockFilterDescription" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="Foreground" Value="{StaticResource LabelBrush}" />
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Margin" Value="3,6" />
    </Style>


    <!-- Defines a style to use for all DataGrid elements -->
    <Style TargetType="DataGrid" BasedOn="{StaticResource BaseControl}">
        <Setter Property="FontSize" Value="11"/>
        <Setter Property="Margin" Value="6" />
        <Setter Property="ColumnWidth" Value="*" />
        <Setter Property="MinRowHeight" Value="24" />
        <Setter Property="Background" Value="White" />
        <Setter Property="BorderBrush" Value="DarkGray" />
        <Setter Property="GridLinesVisibility" Value="None"/>
        <Setter Property="HeadersVisibility" Value="Column"/>
        <Setter Property="IsReadOnly" Value="True" />
        <Setter Property="AutoGenerateColumns" Value="False" />
        <Setter Property="SelectionMode" Value="Single" />
        <Setter Property="SelectionUnit" Value="FullRow" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="ColumnHeaderStyle">
            <Setter.Value>
                <Style TargetType="DataGridColumnHeader">
                    <Setter Property="Foreground" Value="Blue"/>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="CellStyle">
            <Setter.Value>
                <Style TargetType="DataGridCell">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type DataGridCell}">
                                <Grid Background="{TemplateBinding Background}">
                                    <ContentPresenter VerticalAlignment="Center" />
                                </Grid>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="AlternatingRowBackground">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0.00,1.00" EndPoint="1.00,0.01">
                    <GradientBrush.GradientStops>
                        <GradientStopCollection>
                            <GradientStop Color="#FFD6D6D5" Offset="0.069"/>
                            <GradientStop Color="#FFF4F4FA" Offset="1.000"/>
                        </GradientStopCollection>
                    </GradientBrush.GradientStops>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Style.Resources>
            <!-- This enables the selected row to retain a highlight when the data grid loses focus. Has a problem with .Net 4.0 -->
            <!--<SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="LightSalmon"/>-->
            <!-- This works in .Net 4.0 -->
            <!--<SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}" Color="{StaticResource InactiveSelectionColor}" />-->
        </Style.Resources>
    </Style>

    <Style TargetType="DataGrid" x:Key="DataGridEdit" BasedOn="{StaticResource {x:Type DataGrid}}">
        <Setter Property="Margin" Value="4,2,4,4" />
        <Setter Property="MinHeight" Value="100" />
        <Setter Property="MaxHeight" Value="200" />
        <Setter Property="AlternatingRowBackground" Value="#FFDFDFDF"/>
    </Style>
    
    <Style TargetType="{x:Type con:DataGridExtended}" BasedOn="{StaticResource {x:Type DataGrid}}">
        
    </Style>

    <!-- Bit of a kluge. But otherwise, the DataGrid's context menu also pops up if you right click the header row-->
    <Style TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="ContextMenu">
            <Setter.Value>
                <ContextMenu Visibility="Collapsed" IsEnabled="False"/>
            </Setter.Value>
        </Setter>
    </Style>

    <!--STYLES INVOLVED IN CREATING INPUT HINT -->
    
    <!-- Style for text box that receives a hint from a TextBlock behind it -->
    <Style TargetType="TextBox" x:Key="TextBoxWithHint" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Margin" Value="6,0" />
    </Style>

    <!-- This sits behind simply to maintain the background -->
    <Style TargetType="TextBox" x:Key="TextBoxWithHintBack" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="Margin" Value="6,0" />
    </Style>
    
    <!-- Style for a TextBlock that acts as an input prompt -->
    <Style TargetType="TextBlock" x:Key="TextBlockInputPrompt" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="Foreground" Value="LightGray" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Margin" Value="10,0"/>
    </Style>

    <!-- /END:STYLES INVOLVED IN CREATING INPUT HINT  -->

    <!-- Style used for a Button's border -->
    <Style TargetType="Border" x:Key="ButtonBorder">
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="CornerRadius" Value="4"/>
        <Setter Property="Background" Value="{StaticResource NormalBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource NormalBorderBrush}"/>
    </Style>

    <!-- Base style for Button -->
    <Style TargetType="Button" BasedOn="{StaticResource BaseControl}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="FontSize" Value="11" />
        <Setter Property="Foreground" Value="MidnightBlue" />
        <!--<Setter Property="MinWidth" Value="{StaticResource MinButtonWidth}" />-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="Border" Style="{StaticResource ButtonBorder}">
                        <ContentPresenter Margin="2" HorizontalAlignment="Center" VerticalAlignment="Center" RecognizesAccessKey="True" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource DefaultedBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsDefaulted" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource DefaultedBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource DarkBrush}" />
                            <Setter Property="Foreground" Value="Red" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource PressedBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource PressedBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource DisabledBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource DisabledBorderBrush}" />
                            <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Style to configure the header of an expander -->
    <Style TargetType="Expander">
        <Setter Property="HeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Label Margin="2" Content="{TemplateBinding Content}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="IsTabStop" Value="False" />
    </Style>
    
    <!-- Defines a style for an ItemsControl that displays tags -->
    <Style TargetType="ItemsControl" x:Key="ICTagItems">
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <WrapPanel Orientation="Horizontal" Margin="4,0"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Button ToolTip="{Binding TagDescription}" Command="{Binding Command}" Margin="1" Width="92" Height="22" MinHeight="22" FontSize="12" Content="{Binding TagName}">
                        <Button.Template>
                            <ControlTemplate TargetType="Button">
                                <ContentPresenter Margin="2" HorizontalAlignment="Left" VerticalAlignment="Center" Content="{TemplateBinding Content}" />
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter Property="Foreground" Value="Red" />
                                    </Trigger>
                                    <Trigger Property="IsPressed" Value="True">
                                        <Setter Property="Foreground" Value="Green" />
                                    </Trigger>
                                    <Trigger Property="IsEnabled" Value="False">
                                        <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}"/>
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Button.Template>
                        <Button.Resources>
                            <Style TargetType="Button">
                                <Setter Property="Cursor" Value="Hand"/>
                                <Setter Property="Foreground" Value="{Binding Foreground}"/>
                            </Style>
                        </Button.Resources>
                    </Button>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- Defines a style to use for HeaderedContentControl Border elements -->
    <Style TargetType="Border" x:Key="HCCHeaderBorder">
        <Setter Property="BorderBrush" Value="DarkGray" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="3" />
        <Setter Property="Background" Value="{StaticResource HeaderBrush}"/>
    </Style>

    <Style TargetType="Border" x:Key="HCCContentBorder">
        <Setter Property="BorderBrush" Value="DarkGray" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Margin" Value="3" />
        <Setter Property="Padding" Value="3" />
    </Style>
    
    <Style TargetType="TextBlock" x:Key="HCCHeaderText" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="FontSize" Value="11"/>
        <Setter Property="Foreground" Value="#FF604040"/>
    </Style>

    <!-- Defines a style to use on HeaderedContentControl elements. -->
    <Style TargetType="HeaderedContentControl">
        <Setter Property="HeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Border Style="{StaticResource HCCHeaderBorder}">
                        <TextBlock Style="{StaticResource HCCHeaderText}" Text="{TemplateBinding Content}" />
                    </Border>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="HeaderedContentControl">
                    <Border Style="{StaticResource HCCContentBorder}" BorderThickness="{TemplateBinding BorderThickness}">
                        <DockPanel>
                            <ContentPresenter DockPanel.Dock="Top"  ContentSource="Header" />
                            <ContentPresenter ContentSource="Content" ContentTemplate="{TemplateBinding ContentTemplate}" />
                        </DockPanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style TargetType="HeaderedContentControl" x:Key="HCCTool" BasedOn="{StaticResource {x:Type HeaderedContentControl}}">
        <Setter Property="Margin" Value="4"/>
        <Style.Resources>
            <Style TargetType="DataGrid" BasedOn="{StaticResource {x:Type DataGrid}}">
                <Setter Property="AutoGenerateColumns" Value="False"/>
                <Setter Property="Margin" Value="0,3"/>
            </Style>
        </Style.Resources>
    </Style>

    <!-- Base style for TabItem - Gets triggers from App.Controls.xaml -->
    <Style TargetType="TabItem" BasedOn="{StaticResource {x:Type TabItem}}">
        <Setter Property="Padding" Value="6,4"/>
    </Style>
    
    <Style TargetType="GridSplitter" x:Key="GridSplitterVertical">
        <Setter Property="Width" Value="4"/>
        <Setter Property="Margin" Value="0,6,2,6"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="Background" Value="LightGray"/>
    </Style>

    <Style TargetType="StackPanel" x:Key="StackPanelCommandHolder">
        <Setter Property="Orientation" Value="Horizontal"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Style.Resources>
            <Style TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
                <Setter Property="Margin" Value="2"/>
                <Setter Property="Width" Value="84"/>
                <Setter Property="Height" Value="18"/>
            </Style>
            <Style TargetType="TextBox" BasedOn="{StaticResource {x:Type TextBox}}">
                <Setter Property="Margin" Value="2"/>
                <Setter Property="Width" Value="160"/>
            </Style>
            <Style TargetType="Label" BasedOn="{StaticResource {x:Type Label}}">
                <Setter Property="Margin" Value="2"/>
            </Style>
        </Style.Resources>
    </Style>
    
    <Style TargetType="ToolBar" x:Key="ToolBarCommandHolder">
        <Setter Property="Height" Value="38"/>
        <Setter Property="Width" Value="{Binding ActualWidth, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBarTray}}}"/>        
        <Style.Resources>
            <Style x:Key="{x:Static ToolBar.ButtonStyleKey}" TargetType="Button" BasedOn="{StaticResource {x:Static ToolBar.ButtonStyleKey}}">
                <Setter Property="Margin" Value="5,0"/>
                <Setter Property="Padding" Value="5,0"/>
                <Setter Property="VerticalAlignment" Value="Stretch"/>
                <Setter Property="Foreground" Value="#FF0000DD"/>
                <Style.Triggers>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Opacity" Value="0.45" />
                    </Trigger>
                </Style.Triggers>
            </Style>
        </Style.Resources>
    </Style>

</ResourceDictionary>